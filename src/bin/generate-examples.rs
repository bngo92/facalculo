use std::{collections::HashSet, fs};

use facalculo::{
    data::{self, Data},
    module::{Module, NamedModule},
};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let b = include_bytes!("../data-raw-dump.json");
    let data: Data = serde_json::from_slice(b)?;
    let recipe_rates = data::calculate_rates(&data, 2);
    fs::write(
        "examples/copper-ore.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "copper-ore",
            true,
            &[],
            &HashSet::new(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/copper-plate.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "copper-plate",
            true,
            &["copper-ore"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect::<Vec<_>>(),
            &HashSet::new(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/iron-ore.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "iron-ore",
            true,
            &[],
            &HashSet::new(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/iron-plate.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "iron-plate",
            true,
            &["iron-ore"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect::<Vec<_>>(),
            &HashSet::new(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/automation-science-pack.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "automation-science-pack",
            true,
            &["copper-plate", "iron-plate"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect::<Vec<_>>(),
            &["iron-gear-wheel"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/electronic-circuit.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "electronic-circuit",
            true,
            &["copper-plate", "iron-plate"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect::<Vec<_>>(),
            &["copper-cable"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/logistic-science-pack.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "logistic-science-pack",
            true,
            &["iron-plate", "electronic-circuit"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect::<Vec<_>>(),
            &["iron-gear-wheel"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/steel-plate.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "steel-plate",
            true,
            &["iron-plate"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect::<Vec<_>>(),
            &HashSet::new(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/coal.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "coal",
            true,
            &[],
            &HashSet::new(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/stone.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "stone",
            true,
            &[],
            &HashSet::new(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/military-science-pack.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "military-science-pack",
            true,
            &["iron-plate", "steel-plate", "copper-plate", "coal", "stone"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect::<Vec<_>>(),
            &HashSet::new(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/water.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "water",
            true,
            &[],
            &HashSet::new(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/crude-oil.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "crude-oil",
            true,
            &[],
            &HashSet::new(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/advanced-oil-processing.json",
        serde_json::to_string_pretty(&NamedModule {
            name: "advanced-oil-processing".to_owned(),
            module: Module::AdvancedOilProcessing {},
        })?,
    )?;
    fs::write(
        "examples/plastic-bar.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "plastic-bar",
            true,
            &["petroleum-gas", "coal"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect::<Vec<_>>(),
            &[].into_iter().collect(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/advanced-circuit.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "advanced-circuit",
            true,
            &["copper-plate", "electronic-circuit", "plastic-bar"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect::<Vec<_>>(),
            &["copper-cable"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/sulfur.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "sulfur",
            true,
            &["water", "petroleum-gas", "coal"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect::<Vec<_>>(),
            &HashSet::new(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/chemical-science-pack.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "chemical-science-pack",
            true,
            &[
                "iron-plate",
                "electronic-circuit",
                "steel-plate",
                "plastic-bar",
                "advanced-circuit",
                "sulfur",
            ]
            .into_iter()
            .map(ToOwned::to_owned)
            .collect::<Vec<_>>(),
            &["iron-gear-wheel", "pipe"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/production-science-pack.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "production-science-pack",
            true,
            &[
                "iron-plate",
                "electronic-circuit",
                "steel-plate",
                "plastic-bar",
                "advanced-circuit",
                "stone",
            ]
            .into_iter()
            .map(ToOwned::to_owned)
            .collect::<Vec<_>>(),
            &["iron-stick"].into_iter().map(ToOwned::to_owned).collect(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/sulfuric-acid.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "sulfuric-acid",
            true,
            &["sulfur", "iron-plate", "water"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect::<Vec<_>>(),
            &["sulfuric-acid"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/processing-unit.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "processing-unit",
            true,
            &["electronic-circuit", "advanced-circuit", "sulfuric-acid"]
                .into_iter()
                .map(ToOwned::to_owned)
                .collect::<Vec<_>>(),
            &HashSet::new(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/utility-science-pack.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "utility-science-pack",
            true,
            &[
                "steel-plate",
                "copper-plate",
                "plastic-bar",
                "iron-plate",
                "processing-unit",
                "heavy-oil",
                "electronic-circuit",
                "sulfuric-acid",
            ]
            .into_iter()
            .map(ToOwned::to_owned)
            .collect::<Vec<_>>(),
            &[
                "low-density-structure",
                "iron-gear-wheel",
                "pipe",
                "lubricant",
            ]
            .into_iter()
            .map(ToOwned::to_owned)
            .collect(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/space-science-pack/space-science-pack.json",
        serde_json::to_string_pretty(&facalculo::generate(
            "space-science-pack",
            true,
            &[
                "metallic-asteroid-chunk",
                "carbonic-asteroid-chunk",
                "oxide-asteroid-chunk",
            ]
            .into_iter()
            .map(ToOwned::to_owned)
            .collect::<Vec<_>>(),
            &[
                "iron-plate",
                "metallic-asteroid-crushing",
                "carbonic-asteroid-crushing",
                "oxide-asteroid-crushing",
            ]
            .into_iter()
            .map(ToOwned::to_owned)
            .collect(),
            &recipe_rates,
        )?)?,
    )?;
    fs::write(
        "examples/science.json",
        serde_json::to_string_pretty(&NamedModule {
            name: "science".to_owned(),
            module: Module::Science {},
        })?,
    )?;
    Ok(())
}
